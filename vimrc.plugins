" vim: syntax=vim

call plug#begin()

Plug 'dense-analysis/ale'
Plug 'majutsushi/tagbar'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'editorconfig/editorconfig-vim'
Plug 'vim-airline/vim-airline'
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'
Plug 'neomake/neomake'
Plug 'moll/vim-bbye'
Plug 'ayu-theme/ayu-vim'
Plug 'tangzero/terminal.nvim'
Plug 'ryanoasis/vim-devicons'
Plug 'sheerun/vim-polyglot'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" Add Haskell Language
Plug 'neovimhaskell/haskell-vim'

" Add Go Language
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }

" Add Rust Language
Plug 'rust-lang/rust.vim'

" Add Python language
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

" Add Custom Plugins
if filereadable(expand("~/.vimrc.local.plugins"))
    source ~/.vimrc.local.plugins
endif

call plug#end()

filetype plugin indent on

" Plugins Configuration
let g:ale_completion_enabled = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_linters_explicit = 1
let g:ale_linters = {
    \   'rust': ['rls'],
    \   'haskell': ['hie'],
    \   'javascript': ['eslint'],
    \   'c': ['ccpcheck'],
    \   'cpp': ['ccpcheck'],
    \ }
let g:ale_fix_on_save = 1
let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \   'rust': ['rustfmt'],
    \   'haskell': ['brittany'],
    \   'javascript': ['prettier', 'eslint'],
    \   'c': ['clang-format'],
    \   'cpp': ['clang-format'],
    \ }

call deoplete#custom#option('sources', {'_': ['ale']})

let g:deoplete#enable_at_startup = 1

" Haskell
let g:haskell_indent_if = 2
let g:haskell_indent_before_where = 2
let g:haskell_indent_case_alternative = 1
let g:haskell_indent_let_no_in = 0
autocmd Filetype haskell setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

" Go
let g:go_def_mode = 'gopls'
let g:go_info_mode = 'gopls'
let g:go_fmt_command = "goimports"

" Python
let g:pymode_python = 'python3'
let g:pymode_lint_cwindow = 0

" C/C++
call deoplete#custom#var('omni', 'input_patterns', { 'c': '[^. *\t]\.\w*' })
autocmd FileType c setlocal completeopt-=preview
autocmd FileType h setlocal completeopt-=preview
